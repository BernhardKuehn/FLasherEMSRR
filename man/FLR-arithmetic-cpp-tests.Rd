% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{test_FLQuant_FLQuant_multiplier_assignment_operator}
\alias{test_FLQuant_FLQuant_multiplier_assignment_operator}
\alias{test_FLQuantAD_FLQuant_multiplier_assignment_operator}
\alias{test_FLQuantAD_FLQuantAD_multiplier_assignment_operator}
\alias{test_FLQuant_double_multiplier_assignment_operator}
\alias{test_FLQuantAD_double_multiplier_assignment_operator}
\alias{test_FLQuantAD_adouble_multiplier_assignment_operator}
\alias{test_FLQuant_FLQuant_multiplier_operator}
\alias{test_FLQuantAD_FLQuant_multiplier_operator}
\alias{test_FLQuant_FLQuantAD_multiplier_operator}
\alias{test_FLQuantAD_FLQuantAD_multiplier_operator}
\alias{test_FLQuant_double_multiplier_operator}
\alias{test_double_FLQuant_multiplier_operator}
\alias{test_double_FLQuantAD_multiplier_operator}
\alias{test_FLQuantAD_double_multiplier_operator}
\alias{test_FLQuant_adouble_multiplier_operator}
\alias{test_adouble_FLQuant_multiplier_operator}
\alias{test_FLQuantAD_adouble_multiplier_operator}
\alias{test_adouble_FLQuantAD_multiplier_operator}
\alias{test_FLQuant_FLQuant_division_assignment_operator}
\alias{test_FLQuantAD_FLQuant_division_assignment_operator}
\alias{test_FLQuantAD_FLQuantAD_division_assignment_operator}
\alias{test_FLQuant_double_division_assignment_operator}
\alias{test_FLQuantAD_double_division_assignment_operator}
\alias{test_FLQuantAD_adouble_division_assignment_operator}
\alias{test_FLQuant_FLQuant_division_operator}
\alias{test_FLQuantAD_FLQuant_division_operator}
\alias{test_FLQuant_FLQuantAD_division_operator}
\alias{test_FLQuantAD_FLQuantAD_division_operator}
\alias{test_FLQuant_double_division_operator}
\alias{test_double_FLQuant_division_operator}
\alias{test_double_FLQuantAD_division_operator}
\alias{test_FLQuantAD_double_division_operator}
\alias{test_FLQuant_adouble_division_operator}
\alias{test_adouble_FLQuant_division_operator}
\alias{test_FLQuantAD_adouble_division_operator}
\alias{test_adouble_FLQuantAD_division_operator}
\alias{test_FLQuant_FLQuant_subtraction_assignment_operator}
\alias{test_FLQuantAD_FLQuant_subtraction_assignment_operator}
\alias{test_FLQuantAD_FLQuantAD_subtraction_assignment_operator}
\alias{test_FLQuant_double_subtraction_assignment_operator}
\alias{test_FLQuantAD_double_subtraction_assignment_operator}
\alias{test_FLQuantAD_adouble_subtraction_assignment_operator}
\alias{test_FLQuant_FLQuant_subtraction_operator}
\alias{test_FLQuantAD_FLQuant_subtraction_operator}
\alias{test_FLQuant_FLQuantAD_subtraction_operator}
\alias{test_FLQuantAD_FLQuantAD_subtraction_operator}
\alias{test_FLQuant_double_subtraction_operator}
\alias{test_double_FLQuant_subtraction_operator}
\alias{test_double_FLQuantAD_subtraction_operator}
\alias{test_FLQuantAD_double_subtraction_operator}
\alias{test_FLQuant_adouble_subtraction_operator}
\alias{test_adouble_FLQuant_subtraction_operator}
\alias{test_FLQuantAD_adouble_subtraction_operator}
\alias{test_adouble_FLQuantAD_subtraction_operator}
\alias{test_FLQuant_FLQuant_addition_assignment_operator}
\alias{test_FLQuantAD_FLQuant_addition_assignment_operator}
\alias{test_FLQuantAD_FLQuantAD_addition_assignment_operator}
\alias{test_FLQuant_double_addition_assignment_operator}
\alias{test_FLQuantAD_double_addition_assignment_operator}
\alias{test_FLQuantAD_adouble_addition_assignment_operator}
\alias{test_FLQuant_FLQuant_addition_operator}
\alias{test_FLQuantAD_FLQuant_addition_operator}
\alias{test_FLQuant_FLQuantAD_addition_operator}
\alias{test_FLQuantAD_FLQuantAD_addition_operator}
\alias{test_FLQuant_double_addition_operator}
\alias{test_double_FLQuant_addition_operator}
\alias{test_double_FLQuantAD_addition_operator}
\alias{test_FLQuantAD_double_addition_operator}
\alias{test_FLQuant_adouble_addition_operator}
\alias{test_adouble_FLQuant_addition_operator}
\alias{test_FLQuantAD_adouble_addition_operator}
\alias{test_adouble_FLQuantAD_addition_operator}
\alias{test_FLQuant_log}
\alias{test_FLQuantAD_log}
\alias{test_FLQuant_exp}
\alias{test_FLQuantAD_exp}
\alias{test_composite_arithmetic_operators}
\alias{test_FLQuant_quant_sum}
\alias{test_FLQuantAD_quant_sum}
\alias{test_FLQuant_quant_mean}
\alias{test_FLQuantAD_quant_mean}
\alias{test_FLQuant_max_quant}
\alias{test_FLQuantAD_max_quant}
\alias{test_FLQuant_scale_by_max_quant}
\alias{test_FLQuantAD_scale_by_max_quant}
\alias{test_FLQuantAD_unit_sum}
\alias{test_sweep_multADAD}
\alias{test_sweep_multDD}
\alias{test_sweep_multADD}
\alias{test_sweep_multDAD}
\alias{test_sweep_divADAD}
\alias{test_sweep_divDD}
\alias{test_sweep_divADD}
\alias{test_sweep_divDAD}
\alias{test_sweep_plusADAD}
\alias{test_sweep_plusDD}
\alias{test_sweep_plusADD}
\alias{test_sweep_plusDAD}
\alias{test_sweep_minusADAD}
\alias{test_sweep_minusDD}
\alias{test_sweep_minusADD}
\alias{test_sweep_minusDAD}
\alias{test_int_is_na}
\alias{test_double_is_na}
\title{Surrounded by thieves}
\usage{
test_FLQuant_FLQuant_multiplier_assignment_operator(flq1, flq2)

test_FLQuantAD_FLQuant_multiplier_assignment_operator(flqad1, flq2)

test_FLQuantAD_FLQuantAD_multiplier_assignment_operator(flqad1, flqad2)

test_FLQuant_double_multiplier_assignment_operator(flq1, value)

test_FLQuantAD_double_multiplier_assignment_operator(flqad1, value)

test_FLQuantAD_adouble_multiplier_assignment_operator(flqad1, value)

test_FLQuant_FLQuant_multiplier_operator(flq1, flq2)

test_FLQuantAD_FLQuant_multiplier_operator(flqad1, flq2)

test_FLQuant_FLQuantAD_multiplier_operator(flq1, flqad2)

test_FLQuantAD_FLQuantAD_multiplier_operator(flqad1, flqad2)

test_FLQuant_double_multiplier_operator(flq1, value)

test_double_FLQuant_multiplier_operator(value, flq1)

test_double_FLQuantAD_multiplier_operator(value, flq1)

test_FLQuantAD_double_multiplier_operator(flq1, value)

test_FLQuant_adouble_multiplier_operator(flq1, value)

test_adouble_FLQuant_multiplier_operator(value, flq1)

test_FLQuantAD_adouble_multiplier_operator(flq1, value)

test_adouble_FLQuantAD_multiplier_operator(value, flq1)

test_FLQuant_FLQuant_division_assignment_operator(flq1, flq2)

test_FLQuantAD_FLQuant_division_assignment_operator(flqad1, flq2)

test_FLQuantAD_FLQuantAD_division_assignment_operator(flqad1, flqad2)

test_FLQuant_double_division_assignment_operator(flq1, value)

test_FLQuantAD_double_division_assignment_operator(flqad1, value)

test_FLQuantAD_adouble_division_assignment_operator(flqad1, value)

test_FLQuant_FLQuant_division_operator(flq1, flq2)

test_FLQuantAD_FLQuant_division_operator(flqad1, flq2)

test_FLQuant_FLQuantAD_division_operator(flq1, flqad2)

test_FLQuantAD_FLQuantAD_division_operator(flqad1, flqad2)

test_FLQuant_double_division_operator(flq1, value)

test_double_FLQuant_division_operator(value, flq1)

test_double_FLQuantAD_division_operator(value, flq1)

test_FLQuantAD_double_division_operator(flq1, value)

test_FLQuant_adouble_division_operator(flq1, value)

test_adouble_FLQuant_division_operator(value, flq1)

test_FLQuantAD_adouble_division_operator(flq1, value)

test_adouble_FLQuantAD_division_operator(value, flq1)

test_FLQuant_FLQuant_subtraction_assignment_operator(flq1, flq2)

test_FLQuantAD_FLQuant_subtraction_assignment_operator(flqad1, flq2)

test_FLQuantAD_FLQuantAD_subtraction_assignment_operator(flqad1, flqad2)

test_FLQuant_double_subtraction_assignment_operator(flq1, value)

test_FLQuantAD_double_subtraction_assignment_operator(flqad1, value)

test_FLQuantAD_adouble_subtraction_assignment_operator(flqad1, value)

test_FLQuant_FLQuant_subtraction_operator(flq1, flq2)

test_FLQuantAD_FLQuant_subtraction_operator(flqad1, flq2)

test_FLQuant_FLQuantAD_subtraction_operator(flq1, flqad2)

test_FLQuantAD_FLQuantAD_subtraction_operator(flqad1, flqad2)

test_FLQuant_double_subtraction_operator(flq1, value)

test_double_FLQuant_subtraction_operator(value, flq1)

test_double_FLQuantAD_subtraction_operator(value, flq1)

test_FLQuantAD_double_subtraction_operator(flq1, value)

test_FLQuant_adouble_subtraction_operator(flq1, value)

test_adouble_FLQuant_subtraction_operator(value, flq1)

test_FLQuantAD_adouble_subtraction_operator(flq1, value)

test_adouble_FLQuantAD_subtraction_operator(value, flq1)

test_FLQuant_FLQuant_addition_assignment_operator(flq1, flq2)

test_FLQuantAD_FLQuant_addition_assignment_operator(flqad1, flq2)

test_FLQuantAD_FLQuantAD_addition_assignment_operator(flqad1, flqad2)

test_FLQuant_double_addition_assignment_operator(flq1, value)

test_FLQuantAD_double_addition_assignment_operator(flqad1, value)

test_FLQuantAD_adouble_addition_assignment_operator(flqad1, value)

test_FLQuant_FLQuant_addition_operator(flq1, flq2)

test_FLQuantAD_FLQuant_addition_operator(flqad1, flq2)

test_FLQuant_FLQuantAD_addition_operator(flq1, flqad2)

test_FLQuantAD_FLQuantAD_addition_operator(flqad1, flqad2)

test_FLQuant_double_addition_operator(flq1, value)

test_double_FLQuant_addition_operator(value, flq1)

test_double_FLQuantAD_addition_operator(value, flq1)

test_FLQuantAD_double_addition_operator(flq1, value)

test_FLQuant_adouble_addition_operator(flq1, value)

test_adouble_FLQuant_addition_operator(value, flq1)

test_FLQuantAD_adouble_addition_operator(flq1, value)

test_adouble_FLQuantAD_addition_operator(value, flq1)

test_FLQuant_log(flq)

test_FLQuantAD_log(flq)

test_FLQuant_exp(flq)

test_FLQuantAD_exp(flq)

test_composite_arithmetic_operators(flqad, flq, value)

test_FLQuant_quant_sum(flq)

test_FLQuantAD_quant_sum(flq)

test_FLQuant_quant_mean(flq)

test_FLQuantAD_quant_mean(flq)

test_FLQuant_max_quant(flq)

test_FLQuantAD_max_quant(flq)

test_FLQuant_scale_by_max_quant(flq)

test_FLQuantAD_scale_by_max_quant(flq)

test_FLQuantAD_unit_sum(flq)

test_sweep_multADAD(flq1, flq2)

test_sweep_multDD(flq1, flq2)

test_sweep_multADD(flq1, flq2)

test_sweep_multDAD(flq1, flq2)

test_sweep_divADAD(flq1, flq2)

test_sweep_divDD(flq1, flq2)

test_sweep_divADD(flq1, flq2)

test_sweep_divDAD(flq1, flq2)

test_sweep_plusADAD(flq1, flq2)

test_sweep_plusDD(flq1, flq2)

test_sweep_plusADD(flq1, flq2)

test_sweep_plusDAD(flq1, flq2)

test_sweep_minusADAD(flq1, flq2)

test_sweep_minusDD(flq1, flq2)

test_sweep_minusADD(flq1, flq2)

test_sweep_minusDAD(flq1, flq2)

test_int_is_na(val)

test_double_is_na(val)
}
\arguments{
\item{flq1}{a parameter}

\item{flq2}{something}

\item{flqad1}{something}

\item{flqad2}{something}

\item{value}{something}

\item{flq}{something}

\item{flqad}{something}

\item{val}{something}
}
\description{
Surrounded by thieves
}
