// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/FLasher.h"
#include <Rcpp.h>

using namespace Rcpp;

// cppad_found
void cppad_found();
RcppExport SEXP FLasher_cppad_found() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        cppad_found();
    }
    return R_NilValue;
END_RCPP
}
// poly
std::vector<double> poly(unsigned int k_in, double x_in);
RcppExport SEXP FLasher_poly(SEXP k_inSEXP, SEXP x_inSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< unsigned int >::type k_in(k_inSEXP );
        Rcpp::traits::input_parameter< double >::type x_in(x_inSEXP );
        std::vector<double> __result = poly(k_in, x_in);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP FLasher_rcpp_hello_world() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = rcpp_hello_world();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_multiplier_assignment_operator
FLQuant test_FLQuant_FLQuant_multiplier_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_multiplier_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_multiplier_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_multiplier_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_multiplier_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_multiplier_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_multiplier_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_multiplier_assignment_operator
FLQuant test_FLQuant_double_multiplier_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_multiplier_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_multiplier_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_double_multiplier_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_multiplier_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_multiplier_assignment_operator
FLQuantAD test_FLQuantAD_adouble_multiplier_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_multiplier_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_multiplier_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_multiplier_operator
FLQuant test_FLQuant_FLQuant_multiplier_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_multiplier_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_multiplier_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_multiplier_operator
FLQuantAD test_FLQuantAD_FLQuant_multiplier_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_multiplier_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_multiplier_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAD_multiplier_operator
FLQuantAD test_FLQuant_FLQuantAD_multiplier_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuant_FLQuantAD_multiplier_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuant_FLQuantAD_multiplier_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_multiplier_operator
FLQuantAD test_FLQuantAD_FLQuantAD_multiplier_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_multiplier_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_multiplier_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_multiplier_operator
FLQuant test_FLQuant_double_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_multiplier_operator
FLQuant test_double_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_double_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAD_multiplier_operator
FLQuantAD test_double_FLQuantAD_multiplier_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_double_FLQuantAD_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_double_FLQuantAD_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_multiplier_operator
FLQuantAD test_FLQuantAD_double_multiplier_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_multiplier_operator
FLQuantAD test_FLQuant_adouble_multiplier_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuant_adouble_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_multiplier_operator
FLQuantAD test_adouble_FLQuant_multiplier_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_adouble_FLQuant_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuant_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_multiplier_operator
FLQuantAD test_FLQuantAD_adouble_multiplier_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_multiplier_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_multiplier_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAD_multiplier_operator
FLQuantAD test_adouble_FLQuantAD_multiplier_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_adouble_FLQuantAD_multiplier_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuantAD_multiplier_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_division_assignment_operator
FLQuant test_FLQuant_FLQuant_division_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_division_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_division_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_division_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_division_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_division_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_division_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_division_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_division_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_division_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_division_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_division_assignment_operator
FLQuant test_FLQuant_double_division_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_division_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_division_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_division_assignment_operator
FLQuantAD test_FLQuantAD_double_division_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_division_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_division_assignment_operator
FLQuantAD test_FLQuantAD_adouble_division_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_division_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_division_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_division_operator
FLQuant test_FLQuant_FLQuant_division_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_division_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_division_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_division_operator
FLQuantAD test_FLQuantAD_FLQuant_division_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_division_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_division_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAD_division_operator
FLQuantAD test_FLQuant_FLQuantAD_division_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuant_FLQuantAD_division_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuant_FLQuantAD_division_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_division_operator
FLQuantAD test_FLQuantAD_FLQuantAD_division_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_division_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_division_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_division_operator
FLQuant test_FLQuant_double_division_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_division_operator
FLQuant test_double_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_double_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAD_division_operator
FLQuantAD test_double_FLQuantAD_division_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_double_FLQuantAD_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_double_FLQuantAD_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_division_operator
FLQuantAD test_FLQuantAD_double_division_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_division_operator
FLQuantAD test_FLQuant_adouble_division_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuant_adouble_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_division_operator
FLQuantAD test_adouble_FLQuant_division_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_adouble_FLQuant_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuant_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_division_operator
FLQuantAD test_FLQuantAD_adouble_division_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_division_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_division_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAD_division_operator
FLQuantAD test_adouble_FLQuantAD_division_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_adouble_FLQuantAD_division_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuantAD_division_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_assignment_operator
FLQuant test_FLQuant_FLQuant_subtraction_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_subtraction_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_subtraction_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_subtraction_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_subtraction_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_subtraction_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_subtraction_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_subtraction_assignment_operator
FLQuant test_FLQuant_double_subtraction_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_subtraction_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_subtraction_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_double_subtraction_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_subtraction_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_subtraction_assignment_operator
FLQuantAD test_FLQuantAD_adouble_subtraction_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_subtraction_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_subtraction_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_subtraction_operator
FLQuant test_FLQuant_FLQuant_subtraction_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_subtraction_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_subtraction_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_subtraction_operator
FLQuantAD test_FLQuantAD_FLQuant_subtraction_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_subtraction_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_subtraction_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAD_subtraction_operator
FLQuantAD test_FLQuant_FLQuantAD_subtraction_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuant_FLQuantAD_subtraction_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuant_FLQuantAD_subtraction_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_subtraction_operator
FLQuantAD test_FLQuantAD_FLQuantAD_subtraction_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_subtraction_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_subtraction_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_subtraction_operator
FLQuant test_FLQuant_double_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_subtraction_operator
FLQuant test_double_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_double_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAD_subtraction_operator
FLQuantAD test_double_FLQuantAD_subtraction_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_double_FLQuantAD_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_double_FLQuantAD_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_subtraction_operator
FLQuantAD test_FLQuantAD_double_subtraction_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_subtraction_operator
FLQuantAD test_FLQuant_adouble_subtraction_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuant_adouble_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_subtraction_operator
FLQuantAD test_adouble_FLQuant_subtraction_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_adouble_FLQuant_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuant_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_subtraction_operator
FLQuantAD test_FLQuantAD_adouble_subtraction_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_subtraction_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_subtraction_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAD_subtraction_operator
FLQuantAD test_adouble_FLQuantAD_subtraction_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_adouble_FLQuantAD_subtraction_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuantAD_subtraction_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_addition_assignment_operator
FLQuant test_FLQuant_FLQuant_addition_assignment_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_addition_assignment_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_addition_assignment_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_addition_assignment_operator
FLQuantAD test_FLQuantAD_FLQuant_addition_assignment_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_addition_assignment_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_addition_assignment_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_addition_assignment_operator
FLQuantAD test_FLQuantAD_FLQuantAD_addition_assignment_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_addition_assignment_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_addition_assignment_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_addition_assignment_operator
FLQuant test_FLQuant_double_addition_assignment_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_addition_assignment_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_addition_assignment_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_addition_assignment_operator
FLQuantAD test_FLQuantAD_double_addition_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_addition_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_addition_assignment_operator
FLQuantAD test_FLQuantAD_adouble_addition_assignment_operator(FLQuantAD flqad1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_addition_assignment_operator(SEXP flqad1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_addition_assignment_operator(flqad1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_addition_operator
FLQuant test_FLQuant_FLQuant_addition_operator(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_addition_operator(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuant __result = test_FLQuant_FLQuant_addition_operator(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_addition_operator
FLQuantAD test_FLQuantAD_FLQuant_addition_operator(FLQuantAD flqad1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_addition_operator(SEXP flqad1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuant_addition_operator(flqad1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAD_addition_operator
FLQuantAD test_FLQuant_FLQuantAD_addition_operator(FLQuant flq1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuant_FLQuantAD_addition_operator(SEXP flq1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuant_FLQuantAD_addition_operator(flq1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_addition_operator
FLQuantAD test_FLQuantAD_FLQuantAD_addition_operator(FLQuantAD flqad1, FLQuantAD flqad2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_addition_operator(SEXP flqad1SEXP, SEXP flqad2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad1(flqad1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad2(flqad2SEXP );
        FLQuantAD __result = test_FLQuantAD_FLQuantAD_addition_operator(flqad1, flqad2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_double_addition_operator
FLQuant test_FLQuant_double_addition_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_double_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuant_addition_operator
FLQuant test_double_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_double_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuant __result = test_double_FLQuant_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_double_FLQuantAD_addition_operator
FLQuantAD test_double_FLQuantAD_addition_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_double_FLQuantAD_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_double_FLQuantAD_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_double_addition_operator
FLQuantAD test_FLQuantAD_double_addition_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_double_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_double_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_adouble_addition_operator
FLQuantAD test_FLQuant_adouble_addition_operator(FLQuant flq1, double value);
RcppExport SEXP FLasher_test_FLQuant_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuant_adouble_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuant_addition_operator
FLQuantAD test_adouble_FLQuant_addition_operator(double value, FLQuant flq1);
RcppExport SEXP FLasher_test_adouble_FLQuant_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuant_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_adouble_addition_operator
FLQuantAD test_FLQuantAD_adouble_addition_operator(FLQuantAD flq1, double value);
RcppExport SEXP FLasher_test_FLQuantAD_adouble_addition_operator(SEXP flq1SEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_adouble_addition_operator(flq1, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_adouble_FLQuantAD_addition_operator
FLQuantAD test_adouble_FLQuantAD_addition_operator(double value, FLQuantAD flq1);
RcppExport SEXP FLasher_test_adouble_FLQuantAD_addition_operator(SEXP valueSEXP, SEXP flq1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        FLQuantAD __result = test_adouble_FLQuantAD_addition_operator(value, flq1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_log
FLQuant test_FLQuant_log(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_log(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_log(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_log
FLQuantAD test_FLQuantAD_log(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_log(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_log(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_exp
FLQuant test_FLQuant_exp(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_exp(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_exp(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_exp
FLQuantAD test_FLQuantAD_exp(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_exp(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_exp(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_composite_arithmetic_operators
FLQuantAD test_composite_arithmetic_operators(FLQuantAD flqad, FLQuant flq, double value);
RcppExport SEXP FLasher_test_composite_arithmetic_operators(SEXP flqadSEXP, SEXP flqSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flqad(flqadSEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_composite_arithmetic_operators(flqad, flq, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_quant_sum
FLQuant test_FLQuant_quant_sum(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_quant_sum(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_quant_sum(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_quant_sum
FLQuantAD test_FLQuantAD_quant_sum(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_quant_sum(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_quant_sum(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_quant_mean
FLQuant test_FLQuant_quant_mean(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_quant_mean(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_quant_mean(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_quant_mean
FLQuantAD test_FLQuantAD_quant_mean(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_quant_mean(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_quant_mean(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_max_quant
FLQuant test_FLQuant_max_quant(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_max_quant
FLQuantAD test_FLQuantAD_max_quant(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_scale_by_max_quant
FLQuant test_FLQuant_scale_by_max_quant(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_scale_by_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_scale_by_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_scale_by_max_quant
FLQuantAD test_FLQuantAD_scale_by_max_quant(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_scale_by_max_quant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_scale_by_max_quant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_as_wrap
FLQuantAD test_FLQuantAD_as_wrap(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_as_wrap(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_basic_constructor
void test_FLQuantAD_basic_constructor();
RcppExport SEXP FLasher_test_FLQuantAD_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuantAD_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuantAD_sexp_constructor
FLQuantAD test_FLQuantAD_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLasher_test_FLQuantAD_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP );
        FLQuantAD __result = test_FLQuantAD_sexp_constructor(flq_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_dim_constructor
FLQuantAD test_FLQuantAD_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP FLasher_test_FLQuantAD_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP );
        Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP );
        Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP );
        Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP );
        Rcpp::traits::input_parameter< int >::type narea(nareaSEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        FLQuantAD __result = test_FLQuantAD_dim_constructor(nquant, nyear, nunit, nseason, narea, niter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_copy_constructor
FLQuantAD test_FLQuantAD_copy_constructor(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_copy_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_copy_constructor2
Rcpp::List test_FLQuantAD_copy_constructor2(FLQuantAD flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuantAD_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAD_copy_constructor2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_assignment_operator
FLQuantAD test_FLQuantAD_assignment_operator(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_assignment_operator(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_assignment_operator2
Rcpp::List test_FLQuantAD_assignment_operator2(FLQuantAD flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuantAD_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuantAD_assignment_operator2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_from_FLQuant_constructor
FLQuantAD test_FLQuantAD_from_FLQuant_constructor(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuantAD_from_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuantAD __result = test_FLQuantAD_from_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_units
std::string test_FLQuantAD_get_units(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        std::string __result = test_FLQuantAD_get_units(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_dim
Rcpp::IntegerVector test_FLQuantAD_get_dim(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::IntegerVector __result = test_FLQuantAD_get_dim(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_dimnames
Rcpp::List test_FLQuantAD_get_dimnames(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuantAD_get_dimnames(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_size
int test_FLQuantAD_get_size(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        int __result = test_FLQuantAD_get_size(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_nquant
int test_FLQuantAD_get_nquant(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        int __result = test_FLQuantAD_get_nquant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_nyear
int test_FLQuantAD_get_nyear(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        int __result = test_FLQuantAD_get_nyear(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_nunit
int test_FLQuantAD_get_nunit(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        int __result = test_FLQuantAD_get_nunit(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_nseason
int test_FLQuantAD_get_nseason(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        int __result = test_FLQuantAD_get_nseason(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_narea
int test_FLQuantAD_get_narea(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        int __result = test_FLQuantAD_get_narea(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_niter
int test_FLQuantAD_get_niter(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuantAD_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        int __result = test_FLQuantAD_get_niter(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_data_element
int test_FLQuantAD_get_data_element(const FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLasher_test_FLQuantAD_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        int __result = test_FLQuantAD_get_data_element(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_const_single_index_accessor
double test_FLQuantAD_get_const_single_index_accessor(const FLQuantAD flq, const int element);
RcppExport SEXP FLasher_test_FLQuantAD_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        double __result = test_FLQuantAD_get_const_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_single_index_accessor
double test_FLQuantAD_get_single_index_accessor(FLQuantAD flq, int element);
RcppExport SEXP FLasher_test_FLQuantAD_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        double __result = test_FLQuantAD_get_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_set_single_index_accessor
FLQuantAD test_FLQuantAD_set_single_index_accessor(FLQuantAD flq, int element, double value);
RcppExport SEXP FLasher_test_FLQuantAD_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_set_single_index_accessor(flq, element, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_const_get_accessor
double test_FLQuantAD_const_get_accessor(const FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLasher_test_FLQuantAD_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuantAD_const_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_accessor
double test_FLQuantAD_get_accessor(FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLasher_test_FLQuantAD_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuantAD_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_set_accessor
FLQuantAD test_FLQuantAD_set_accessor(FLQuantAD flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuantAD_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_set_accessor(flq, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_const_indices_accessor
double test_FLQuantAD_get_const_indices_accessor(const FLQuantAD flq, std::vector<unsigned int> indices);
RcppExport SEXP FLasher_test_FLQuantAD_get_const_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuantAD_get_const_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_get_indices_accessor
double test_FLQuantAD_get_indices_accessor(FLQuantAD flq, std::vector<unsigned int> indices);
RcppExport SEXP FLasher_test_FLQuantAD_get_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuantAD_get_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_set_indices_accessor
FLQuantAD test_FLQuantAD_set_indices_accessor(FLQuantAD flq, std::vector<unsigned int> indices, double value);
RcppExport SEXP FLasher_test_FLQuantAD_set_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuantAD __result = test_FLQuantAD_set_indices_accessor(flq, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_set_dimnames
FLQuantAD test_FLQuantAD_set_dimnames(FLQuantAD flq, Rcpp::List new_dimnames);
RcppExport SEXP FLasher_test_FLQuantAD_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP );
        FLQuantAD __result = test_FLQuantAD_set_dimnames(flq, new_dimnames);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuantAD_match_dims
int test_FLQuantAD_FLQuantAD_match_dims(FLQuantAD flq1, FLQuantAD flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuantAD_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP );
        int __result = test_FLQuantAD_FLQuantAD_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuantAD_FLQuant_match_dims
int test_FLQuantAD_FLQuant_match_dims(FLQuantAD flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuantAD_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        int __result = test_FLQuantAD_FLQuant_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuantAD_match_dims
int test_FLQuant_FLQuantAD_match_dims(FLQuant flq1, FLQuantAD flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuantAD_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq2(flq2SEXP );
        int __result = test_FLQuant_FLQuantAD_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_as_wrap
FLQuant test_FLQuant_as_wrap(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_as_wrap(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_as_wrap(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_basic_constructor
void test_FLQuant_basic_constructor();
RcppExport SEXP FLasher_test_FLQuant_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuant_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuant_sexp_constructor
FLQuant test_FLQuant_sexp_constructor(SEXP flq_sexp);
RcppExport SEXP FLasher_test_FLQuant_sexp_constructor(SEXP flq_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp(flq_sexpSEXP );
        FLQuant __result = test_FLQuant_sexp_constructor(flq_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_dim_constructor
FLQuant test_FLQuant_dim_constructor(int nquant, int nyear, int nunit, int nseason, int narea, int niter);
RcppExport SEXP FLasher_test_FLQuant_dim_constructor(SEXP nquantSEXP, SEXP nyearSEXP, SEXP nunitSEXP, SEXP nseasonSEXP, SEXP nareaSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type nquant(nquantSEXP );
        Rcpp::traits::input_parameter< int >::type nyear(nyearSEXP );
        Rcpp::traits::input_parameter< int >::type nunit(nunitSEXP );
        Rcpp::traits::input_parameter< int >::type nseason(nseasonSEXP );
        Rcpp::traits::input_parameter< int >::type narea(nareaSEXP );
        Rcpp::traits::input_parameter< int >::type niter(niterSEXP );
        FLQuant __result = test_FLQuant_dim_constructor(nquant, nyear, nunit, nseason, narea, niter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_copy_constructor
FLQuant test_FLQuant_copy_constructor(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_copy_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_copy_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_copy_constructor2
Rcpp::List test_FLQuant_copy_constructor2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuant_copy_constructor2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant_copy_constructor2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_assignment_operator
FLQuant test_FLQuant_assignment_operator(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_assignment_operator(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQuant_assignment_operator(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_assignment_operator2
Rcpp::List test_FLQuant_assignment_operator2(FLQuant flq1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuant_assignment_operator2(SEXP flq1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant_assignment_operator2(flq1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_data
std::vector<double> test_FLQuant_get_data(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_data(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        std::vector<double> __result = test_FLQuant_get_data(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_units
std::string test_FLQuant_get_units(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_units(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        std::string __result = test_FLQuant_get_units(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dim
Rcpp::IntegerVector test_FLQuant_get_dim(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_dim(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::IntegerVector __result = test_FLQuant_get_dim(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dimnames
Rcpp::List test_FLQuant_get_dimnames(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_dimnames(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuant_get_dimnames(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_dimnames2
Rcpp::List test_FLQuant_get_dimnames2(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_dimnames2(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::List __result = test_FLQuant_get_dimnames2(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_size
int test_FLQuant_get_size(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_size(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_size(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nquant
int test_FLQuant_get_nquant(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_nquant(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nquant(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nyear
int test_FLQuant_get_nyear(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_nyear(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nyear(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nunit
int test_FLQuant_get_nunit(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_nunit(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nunit(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_nseason
int test_FLQuant_get_nseason(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_nseason(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_nseason(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_narea
int test_FLQuant_get_narea(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_narea(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_narea(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_niter
int test_FLQuant_get_niter(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant_get_niter(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        int __result = test_FLQuant_get_niter(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_data_element
int test_FLQuant_get_data_element(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLasher_test_FLQuant_get_data_element(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        int __result = test_FLQuant_get_data_element(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_const_single_index_accessor
double test_FLQuant_get_const_single_index_accessor(const FLQuant flq, const int element);
RcppExport SEXP FLasher_test_FLQuant_get_const_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        double __result = test_FLQuant_get_const_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_single_index_accessor
double test_FLQuant_get_single_index_accessor(FLQuant flq, int element);
RcppExport SEXP FLasher_test_FLQuant_get_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        double __result = test_FLQuant_get_single_index_accessor(flq, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_single_index_accessor
FLQuant test_FLQuant_set_single_index_accessor(FLQuant flq, int element, double value);
RcppExport SEXP FLasher_test_FLQuant_set_single_index_accessor(SEXP flqSEXP, SEXP elementSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_single_index_accessor(flq, element, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_const_get_accessor
double test_FLQuant_const_get_accessor(const FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLasher_test_FLQuant_const_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuant_const_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_accessor
double test_FLQuant_get_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter);
RcppExport SEXP FLasher_test_FLQuant_get_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        double __result = test_FLQuant_get_accessor(flq, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_accessor
FLQuant test_FLQuant_set_accessor(FLQuant flq, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuant_set_accessor(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_accessor(flq, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_const_indices_accessor
double test_FLQuant_get_const_indices_accessor(const FLQuant flq, std::vector<unsigned int> indices);
RcppExport SEXP FLasher_test_FLQuant_get_const_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuant_get_const_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_indices_accessor
double test_FLQuant_get_indices_accessor(FLQuant flq, std::vector<unsigned int> indices);
RcppExport SEXP FLasher_test_FLQuant_get_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        double __result = test_FLQuant_get_indices_accessor(flq, indices);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_indices_accessor
FLQuant test_FLQuant_set_indices_accessor(FLQuant flq, std::vector<unsigned int> indices, double value);
RcppExport SEXP FLasher_test_FLQuant_set_indices_accessor(SEXP flqSEXP, SEXP indicesSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<unsigned int> >::type indices(indicesSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        FLQuant __result = test_FLQuant_set_indices_accessor(flq, indices, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_get_all_iters
FLQuant test_FLQuant_get_all_iters(FLQuant flq, int quant, int year, int unit, int season, int area);
RcppExport SEXP FLasher_test_FLQuant_get_all_iters(SEXP flqSEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        FLQuant __result = test_FLQuant_get_all_iters(flq, quant, year, unit, season, area);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_data
FLQuant test_FLQuant_set_data(FLQuant flq, std::vector<double> data_in);
RcppExport SEXP FLasher_test_FLQuant_set_data(SEXP flqSEXP, SEXP data_inSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::vector<double> >::type data_in(data_inSEXP );
        FLQuant __result = test_FLQuant_set_data(flq, data_in);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_dimnames
FLQuant test_FLQuant_set_dimnames(FLQuant flq, Rcpp::List new_dimnames);
RcppExport SEXP FLasher_test_FLQuant_set_dimnames(SEXP flqSEXP, SEXP new_dimnamesSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< Rcpp::List >::type new_dimnames(new_dimnamesSEXP );
        FLQuant __result = test_FLQuant_set_dimnames(flq, new_dimnames);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_set_units
FLQuant test_FLQuant_set_units(FLQuant flq, std::string new_units);
RcppExport SEXP FLasher_test_FLQuant_set_units(SEXP flqSEXP, SEXP new_unitsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< std::string >::type new_units(new_unitsSEXP );
        FLQuant __result = test_FLQuant_set_units(flq, new_units);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_subset
FLQuant test_FLQuant_subset(FLQuant flq, const int quant_min, const int quant_max, const int year_min, const int year_max, const int unit_min, const int unit_max, const int season_min, const int season_max, const int area_min, const int area_max, const int iter_min, const int iter_max);
RcppExport SEXP FLasher_test_FLQuant_subset(SEXP flqSEXP, SEXP quant_minSEXP, SEXP quant_maxSEXP, SEXP year_minSEXP, SEXP year_maxSEXP, SEXP unit_minSEXP, SEXP unit_maxSEXP, SEXP season_minSEXP, SEXP season_maxSEXP, SEXP area_minSEXP, SEXP area_maxSEXP, SEXP iter_minSEXP, SEXP iter_maxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type quant_min(quant_minSEXP );
        Rcpp::traits::input_parameter< const int >::type quant_max(quant_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type year_min(year_minSEXP );
        Rcpp::traits::input_parameter< const int >::type year_max(year_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type unit_min(unit_minSEXP );
        Rcpp::traits::input_parameter< const int >::type unit_max(unit_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type season_min(season_minSEXP );
        Rcpp::traits::input_parameter< const int >::type season_max(season_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type area_min(area_minSEXP );
        Rcpp::traits::input_parameter< const int >::type area_max(area_maxSEXP );
        Rcpp::traits::input_parameter< const int >::type iter_min(iter_minSEXP );
        Rcpp::traits::input_parameter< const int >::type iter_max(iter_maxSEXP );
        FLQuant __result = test_FLQuant_subset(flq, quant_min, quant_max, year_min, year_max, unit_min, unit_max, season_min, season_max, area_min, area_max, iter_min, iter_max);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_propagate_iters
Rcpp::List test_FLQuant_propagate_iters(FLQuant flq, const int iters);
RcppExport SEXP FLasher_test_FLQuant_propagate_iters(SEXP flqSEXP, SEXP itersSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        Rcpp::traits::input_parameter< const int >::type iters(itersSEXP );
        Rcpp::List __result = test_FLQuant_propagate_iters(flq, iters);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant_FLQuant_match_dims
int test_FLQuant_FLQuant_match_dims(FLQuant flq1, FLQuant flq2);
RcppExport SEXP FLasher_test_FLQuant_FLQuant_match_dims(SEXP flq1SEXP, SEXP flq2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq1(flq1SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq2(flq2SEXP );
        int __result = test_FLQuant_FLQuant_match_dims(flq1, flq2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_as_wrap
FLQuant7 test_FLQuant7_as_wrap(FLQuant7 flq7);
RcppExport SEXP FLasher_test_FLQuant7_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_as_wrap(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_empty_wrap
FLQuant7 test_FLQuant7_empty_wrap();
RcppExport SEXP FLasher_test_FLQuant7_empty_wrap() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        FLQuant7 __result = test_FLQuant7_empty_wrap();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_basic_constructor
void test_FLQuant7_basic_constructor();
RcppExport SEXP FLasher_test_FLQuant7_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuant7_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuant7_sexp_constructor
FLQuant7 test_FLQuant7_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP FLasher_test_FLQuant7_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        FLQuant7 __result = test_FLQuant7_sexp_constructor(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_FLQuant_constructor
FLQuant7 test_FLQuant7_FLQuant_constructor(FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant7_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_copy_constructor
FLQuant7 test_FLQuant7_copy_constructor(FLQuant7 flq7);
RcppExport SEXP FLasher_test_FLQuant7_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_copy_constructor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_copy_constructor2
Rcpp::List test_FLQuant7_copy_constructor2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuant7_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_assignment_operator
FLQuant7 test_FLQuant7_assignment_operator(FLQuant7 flq7);
RcppExport SEXP FLasher_test_FLQuant7_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant7 __result = test_FLQuant7_assignment_operator(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_assignment_operator2
Rcpp::List test_FLQuant7_assignment_operator2(FLQuant7 flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuant7_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_function_operator
FLQuant7 test_FLQuant7_function_operator(FLQuant7 flq7, FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant7_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_function_operator(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_ndim7
int test_FLQuant7_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP FLasher_test_FLQuant7_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        int __result = test_FLQuant7_get_ndim7(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_get_single_index_accessor
FLQuant test_FLQuant7_const_get_single_index_accessor(const FLQuant7 flq7, const int element);
RcppExport SEXP FLasher_test_FLQuant7_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuant __result = test_FLQuant7_const_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_single_index_accessor
FLQuant test_FLQuant7_get_single_index_accessor(FLQuant7 flq7, const int element);
RcppExport SEXP FLasher_test_FLQuant7_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuant __result = test_FLQuant7_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_set_single_index_accessor
FLQuant7 test_FLQuant7_set_single_index_accessor(FLQuant7 flq7, const int element, const FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant7_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_set_single_index_accessor(flq7, element, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_get_accessor
double test_FLQuant7_const_get_accessor(const FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_get_accessor
double test_FLQuant7_get_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_set_accessor
FLQuant7 test_FLQuant7_set_accessor(FLQuant7 flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLasher_test_FLQuant7_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuant7 __result = test_FLQuant7_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_default_dim7_get_accessor
FLQuant test_FLQuant7_const_default_dim7_get_accessor(const FLQuant7 flq7);
RcppExport SEXP FLasher_test_FLQuant7_const_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        FLQuant __result = test_FLQuant7_const_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_get_accessor
FLQuant test_FLQuant7_default_dim7_get_accessor(FLQuant7 flq7);
RcppExport SEXP FLasher_test_FLQuant7_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        FLQuant __result = test_FLQuant7_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_set_accessor
FLQuant7 test_FLQuant7_default_dim7_set_accessor(FLQuant7 flq7, FLQuant flq);
RcppExport SEXP FLasher_test_FLQuant7_default_dim7_set_accessor(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant7 __result = test_FLQuant7_default_dim7_set_accessor(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_const_default_dim7_get_accessor_multi
double test_FLQuant7_const_default_dim7_get_accessor_multi(const FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7_const_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_const_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_get_accessor_multi
double test_FLQuant7_default_dim7_get_accessor_multi(FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7_default_dim7_set_accessor_multi
FLQuant7 test_FLQuant7_default_dim7_set_accessor_multi(FLQuant7 flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLasher_test_FLQuant7_default_dim7_set_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7 >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuant7 __result = test_FLQuant7_default_dim7_set_accessor_multi(flq7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_as_wrap
FLQuant7AD test_FLQuant7AD_as_wrap(FLQuant7AD flq7);
RcppExport SEXP FLasher_test_FLQuant7AD_as_wrap(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        FLQuant7AD __result = test_FLQuant7AD_as_wrap(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_empty_wrap
FLQuant7AD test_FLQuant7AD_empty_wrap();
RcppExport SEXP FLasher_test_FLQuant7AD_empty_wrap() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        FLQuant7AD __result = test_FLQuant7AD_empty_wrap();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_basic_constructor
void test_FLQuant7AD_basic_constructor();
RcppExport SEXP FLasher_test_FLQuant7AD_basic_constructor() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        test_FLQuant7AD_basic_constructor();
    }
    return R_NilValue;
END_RCPP
}
// test_FLQuant7AD_sexp_constructor
FLQuant7AD test_FLQuant7AD_sexp_constructor(SEXP flq_sexp1);
RcppExport SEXP FLasher_test_FLQuant7AD_sexp_constructor(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        FLQuant7AD __result = test_FLQuant7AD_sexp_constructor(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_FLQuant_constructor
FLQuant7AD test_FLQuant7AD_FLQuant_constructor(FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuant7AD_FLQuant_constructor(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuant7AD __result = test_FLQuant7AD_FLQuant_constructor(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_copy_constructor
FLQuant7AD test_FLQuant7AD_copy_constructor(FLQuant7AD flq7);
RcppExport SEXP FLasher_test_FLQuant7AD_copy_constructor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        FLQuant7AD __result = test_FLQuant7AD_copy_constructor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_copy_constructor2
Rcpp::List test_FLQuant7AD_copy_constructor2(FLQuant7AD flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuant7AD_copy_constructor2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7AD_copy_constructor2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_assignment_operator
FLQuant7AD test_FLQuant7AD_assignment_operator(FLQuant7AD flq7);
RcppExport SEXP FLasher_test_FLQuant7AD_assignment_operator(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        FLQuant7AD __result = test_FLQuant7AD_assignment_operator(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_assignment_operator2
Rcpp::List test_FLQuant7AD_assignment_operator2(FLQuant7AD flq71, int dim7, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLQuant7AD_assignment_operator2(SEXP flq71SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq71(flq71SEXP );
        Rcpp::traits::input_parameter< int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLQuant7AD_assignment_operator2(flq71, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_function_operator
FLQuant7AD test_FLQuant7AD_function_operator(FLQuant7AD flq7, FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuant7AD_function_operator(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuant7AD __result = test_FLQuant7AD_function_operator(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_get_ndim7
int test_FLQuant7AD_get_ndim7(SEXP flq_sexp1);
RcppExport SEXP FLasher_test_FLQuant7AD_get_ndim7(SEXP flq_sexp1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type flq_sexp1(flq_sexp1SEXP );
        int __result = test_FLQuant7AD_get_ndim7(flq_sexp1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_const_get_single_index_accessor
FLQuantAD test_FLQuant7AD_const_get_single_index_accessor(const FLQuant7AD flq7, const int element);
RcppExport SEXP FLasher_test_FLQuant7AD_const_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuantAD __result = test_FLQuant7AD_const_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_get_single_index_accessor
FLQuantAD test_FLQuant7AD_get_single_index_accessor(FLQuant7AD flq7, const int element);
RcppExport SEXP FLasher_test_FLQuant7AD_get_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        FLQuantAD __result = test_FLQuant7AD_get_single_index_accessor(flq7, element);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_set_single_index_accessor
FLQuant7AD test_FLQuant7AD_set_single_index_accessor(FLQuant7AD flq7, const int element, const FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuant7AD_set_single_index_accessor(SEXP flq7SEXP, SEXP elementSEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type element(elementSEXP );
        Rcpp::traits::input_parameter< const FLQuantAD >::type flq(flqSEXP );
        FLQuant7AD __result = test_FLQuant7AD_set_single_index_accessor(flq7, element, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_const_get_accessor
double test_FLQuant7AD_const_get_accessor(const FLQuant7AD flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7AD_const_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7AD_const_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_get_accessor
double test_FLQuant7AD_get_accessor(FLQuant7AD flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7AD_get_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7AD_get_accessor(flq7, dim7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_set_accessor
FLQuant7AD test_FLQuant7AD_set_accessor(FLQuant7AD flq7, const int dim7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLasher_test_FLQuant7AD_set_accessor(SEXP flq7SEXP, SEXP dim7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type dim7(dim7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuant7AD __result = test_FLQuant7AD_set_accessor(flq7, dim7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_const_default_dim7_get_accessor
FLQuantAD test_FLQuant7AD_const_default_dim7_get_accessor(const FLQuant7AD flq7);
RcppExport SEXP FLasher_test_FLQuant7AD_const_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP );
        FLQuantAD __result = test_FLQuant7AD_const_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_default_dim7_get_accessor
FLQuantAD test_FLQuant7AD_default_dim7_get_accessor(FLQuant7AD flq7);
RcppExport SEXP FLasher_test_FLQuant7AD_default_dim7_get_accessor(SEXP flq7SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        FLQuantAD __result = test_FLQuant7AD_default_dim7_get_accessor(flq7);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_default_dim7_set_accessor
FLQuant7AD test_FLQuant7AD_default_dim7_set_accessor(FLQuant7AD flq7, FLQuantAD flq);
RcppExport SEXP FLasher_test_FLQuant7AD_default_dim7_set_accessor(SEXP flq7SEXP, SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< FLQuantAD >::type flq(flqSEXP );
        FLQuant7AD __result = test_FLQuant7AD_default_dim7_set_accessor(flq7, flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_const_default_dim7_get_accessor_multi
double test_FLQuant7AD_const_default_dim7_get_accessor_multi(const FLQuant7AD flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7AD_const_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7AD_const_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_default_dim7_get_accessor_multi
double test_FLQuant7AD_default_dim7_get_accessor_multi(FLQuant7AD flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter);
RcppExport SEXP FLasher_test_FLQuant7AD_default_dim7_get_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        double __result = test_FLQuant7AD_default_dim7_get_accessor_multi(flq7, quant, year, unit, season, area, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQuant7AD_default_dim7_set_accessor_multi
FLQuant7AD test_FLQuant7AD_default_dim7_set_accessor_multi(FLQuant7AD flq7, const int quant, const int year, const int unit, const int season, const int area, const int iter, const double value);
RcppExport SEXP FLasher_test_FLQuant7AD_default_dim7_set_accessor_multi(SEXP flq7SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant7AD >::type flq7(flq7SEXP );
        Rcpp::traits::input_parameter< const int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< const int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< const int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< const int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< const int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< const int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< const double >::type value(valueSEXP );
        FLQuant7AD __result = test_FLQuant7AD_default_dim7_set_accessor_multi(flq7, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLQ_in_FLS
FLQuant test_FLQ_in_FLS(FLQuant flq);
RcppExport SEXP FLasher_test_FLQ_in_FLS(SEXP flqSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLQuant >::type flq(flqSEXP );
        FLQuant __result = test_FLQ_in_FLS(flq);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_sexp_constructor
FLQuant test_FLStock_sexp_constructor(SEXP fls_sexp);
RcppExport SEXP FLasher_test_FLStock_sexp_constructor(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP );
        FLQuant __result = test_FLStock_sexp_constructor(fls_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_wrap
FLStock test_FLStock_wrap(SEXP fls_sexp);
RcppExport SEXP FLasher_test_FLStock_wrap(SEXP fls_sexpSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type fls_sexp(fls_sexpSEXP );
        FLStock __result = test_FLStock_wrap(fls_sexp);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_as
FLQuant test_FLStock_as(FLStock fls);
RcppExport SEXP FLasher_test_FLStock_as(SEXP flsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP );
        FLQuant __result = test_FLStock_as(fls);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_as_wrap
FLStock test_FLStock_as_wrap(FLStock fls);
RcppExport SEXP FLasher_test_FLStock_as_wrap(SEXP flsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls(flsSEXP );
        FLStock __result = test_FLStock_as_wrap(fls);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_copy_constructor
Rcpp::List test_FLStock_copy_constructor(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLStock_copy_constructor(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLStock_copy_constructor(fls1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_FLStock_assignment_operator
Rcpp::List test_FLStock_assignment_operator(FLStock fls1, int quant, int year, int unit, int season, int area, int iter, double value);
RcppExport SEXP FLasher_test_FLStock_assignment_operator(SEXP fls1SEXP, SEXP quantSEXP, SEXP yearSEXP, SEXP unitSEXP, SEXP seasonSEXP, SEXP areaSEXP, SEXP iterSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< FLStock >::type fls1(fls1SEXP );
        Rcpp::traits::input_parameter< int >::type quant(quantSEXP );
        Rcpp::traits::input_parameter< int >::type year(yearSEXP );
        Rcpp::traits::input_parameter< int >::type unit(unitSEXP );
        Rcpp::traits::input_parameter< int >::type season(seasonSEXP );
        Rcpp::traits::input_parameter< int >::type area(areaSEXP );
        Rcpp::traits::input_parameter< int >::type iter(iterSEXP );
        Rcpp::traits::input_parameter< double >::type value(valueSEXP );
        Rcpp::List __result = test_FLStock_assignment_operator(fls1, quant, year, unit, season, area, iter, value);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
